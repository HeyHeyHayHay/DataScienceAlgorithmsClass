
#define gaussian
//#define uniform
//#define epanechnikov
//#define logistic
//#define triangular

#define PI     3.14159265


//Random Nois

// from spctrspct
float rand(vec2 coordinate, float t){
    return fract(sin(t + dot(coordinate, vec2(12.9898, 78.233))) * 43758.5453);
}

vec2 n22 (vec2 p)
{
    vec3 a = fract(p.xyx * vec3(123.34, 234.34, 345.65));
    a += dot(a, a + 34.45);
    return fract(vec2(a.x * a.y, a.y * a.z));
}

vec2 get_gradient(vec2 pos)
{
    float twoPi = 6.283185;
    float angle = n22(pos).x * twoPi;
    return vec2(cos(angle), sin(angle));
}

float perlin_noise(vec2 uv, float cells_count)
{
    vec2 pos_in_grid = uv * cells_count;
    vec2 cell_pos_in_grid =  floor(pos_in_grid);
    vec2 local_pos_in_cell = (pos_in_grid - cell_pos_in_grid);
    vec2 blend = local_pos_in_cell * local_pos_in_cell * (3.0f - 2.0f * local_pos_in_cell);

    vec2 left_top = cell_pos_in_grid + vec2(0, 1);
    vec2 right_top = cell_pos_in_grid + vec2(1, 1);
    vec2 left_bottom = cell_pos_in_grid + vec2(0, 0);
    vec2 right_bottom = cell_pos_in_grid + vec2(1, 0);

    float left_top_dot = dot(pos_in_grid - left_top, get_gradient(left_top));
    float right_top_dot = dot(pos_in_grid - right_top,  get_gradient(right_top));
    float left_bottom_dot = dot(pos_in_grid - left_bottom, get_gradient(left_bottom));
    float right_bottom_dot = dot(pos_in_grid - right_bottom, get_gradient(right_bottom));

    float noise_value = mix(
                            mix(left_bottom_dot, right_bottom_dot, blend.x),
                            mix(left_top_dot, right_top_dot, blend.x),
                            blend.y);


    return (0.5 + 0.5 * (noise_value / 0.7));
}

float dcircle(vec2 uv, vec2 center, float radius){
    return length(uv-center) - radius;
}

// Drawing Functions
vec3 drawIsoLine(float d, float height, float thickness, vec3 lineColor, vec3 currentColor){

    d -= height;

    float i = smoothstep(thickness, 0.0, abs(d));

    vec3 color = mix(currentColor, lineColor, i);
    return color;
}

vec3 drawFill(float d, float thickness, vec3 fillColor, vec3 currentColor){

    float opacity = smoothstep(thickness, 0.0, d);
    vec3 color = mix(currentColor, fillColor, opacity);
    return color;
}

vec3 drawFillCutOff(float d, float cutoff, float thickness, vec3 fillColor, vec3 currentColor){

    float opacity = smoothstep(thickness, 0.0, d - cutoff);
    vec3 color = mix(currentColor, fillColor, 1.0-opacity);
    return color;

}

// Normalize coordinates
vec2 toUV(vec2 xy){
    vec2 uv = xy/iResolution.xy;
    uv = -1.0 + 2.0*uv;
    uv.x = uv.x * (iResolution.x / iResolution.y);
    return uv;
}

// Kernel Density Estimation

float gaussianKernel(vec2 uv, vec2 dataPoint, float bandwidth){
    float distanceInput = length(uv - dataPoint) / bandwidth;
    return (1.0/sqrt(2.0*PI))*exp(-distanceInput*distanceInput / 2.0) ;
}

float kde(vec2 uv, vec2 points[5], int pointCount, float bandwidth){

    float kde = 0.0;

    for (int i = 0; i < pointCount; i++){

        #ifdef gaussian
            kde += gaussianKernel(uv, points[i], bandwidth);
        #endif

    }

    return kde/(float(pointCount)*bandwidth*bandwidth);
}

// Spawn Point

float erfinv(float x){
    float w=-log((1.0-x)*(1.0+x)),r=sqrt(w)-3.0;
    return x*(w<5.0?
        ((((((((
            -8.739830926986453e-9*w
            +2.199320405322238e-7)*w
            -1.966750122181133e-6)*w
            +3.937691969181441e-6)*w
            +4.468665038392376e-5)*w
            -1.276641491126884e-4)*w
            -0.002334153664764541)*w
            +0.01154860769900335)*w
            +0.2320138202612554)*w
            +0.8862269207509996:
        ((((((((
            1.2652711101696e-4*r
            -3.214320137984e-4)*r
            -6.653650053695999e-5)*r
            +0.0014966032289088)*r
            -0.00359531880384848)*r
            +0.005684044665664001)*r
            -0.007637247407844399)*r
            +0.009445416777307598)*r
            +1.001674947974566)*r
            +2.832976804018961
        );
}

float sampleNormalDistribution(float mean, float standardDeviation, float seed){
    float sampleNormal = sqrt(2.0)*standardDeviation*erfinv(2.0*rand(vec2(0.0, 0.0), seed) - 1.0);
    return mean + sampleNormal;
}

vec2 spawnPoint(vec2 centerUV, float standardDeviation, float seed){
    float xCoordinate = sampleNormalDistribution(centerUV.x, standardDeviation, seed);
    float yCoordinate = sampleNormalDistribution(centerUV.y, standardDeviation, seed+0.1);

    return vec2(xCoordinate, yCoordinate);
}

vec2[5] spawn5Points(vec2 centerUV, float standardDeviation, float seed){
    vec2 points[5] = vec2[](
        spawnPoint(centerUV, standardDeviation, seed+4.0),
        spawnPoint(centerUV, standardDeviation, seed+5.0),
        spawnPoint(centerUV, standardDeviation, seed+6.0),
        spawnPoint(centerUV, standardDeviation, seed+7.0),
        spawnPoint(centerUV, standardDeviation, seed+8.0)
    );
    return points;
}

// Color shifting

vec3 colorShift(vec2 id, vec3 currentColor, float intensity){

    currentColor.x += (2.0*rand(id, 1.0) - 1.0)*intensity;
    currentColor.y += (2.0*rand(id, 2.0) - 1.0)*intensity;
    currentColor.z += (2.0*rand(id, 4.0) - 1.0)*intensity;

    return currentColor;
}


vec3 hsv2rgb( in vec3 c )
{
    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );

	return c.z * mix( vec3(1.0), rgb, c.y);
}

// random in palette
vec3 colorInRange(vec2 uv, vec2 hueInterval, vec2 saturationInterval, vec2 valueInterval, float seed){

    float hueRange = hueInterval.y - hueInterval.x;
    float saturationRange = saturationInterval.y - saturationInterval.x;
    float valueRange = valueInterval.y - valueInterval.x;

    float hue = rand(uv, seed)*hueRange + hueInterval.x;
    float saturation = rand(uv, seed)*saturationRange + saturationInterval.x;
    float value = rand(uv, seed)*valueRange + valueInterval.x;

    return vec3(hue, saturation, value);
}

vec3 randomAnalogous(vec2 uv, vec3 hsvOriginColor, float seed){
    vec2 hueInterval = vec2(hsvOriginColor.x - 0.20, hsvOriginColor.x + 0.20);
    vec2 saturationInterval = vec2(hsvOriginColor.y - 0.05, hsvOriginColor.y + 0.05);
    vec2 valueInterval = vec2(hsvOriginColor.z - 0.05, hsvOriginColor.z + 0.05);

    return colorInRange(uv, hueInterval, saturationInterval, valueInterval, seed);
}

vec3 randomComplementary(vec2 uv, vec3 hsvOriginColor, float seed){

    vec2 hueInterval = vec2(0.0, 1.0);
    vec2 saturationInterval = vec2(0.0, 1.0);
    vec2 valueInterval = vec2(0.0, 1.0);

    //complement
    float intervalChoice = rand(uv, seed+0.1);
    if (intervalChoice <= 0.5){
        hueInterval = vec2(hsvOriginColor.x - 0.04+0.5, hsvOriginColor.x + 0.04+0.5);
        saturationInterval = vec2(hsvOriginColor.y - 0.05, hsvOriginColor.y + 0.05);
        valueInterval = vec2(hsvOriginColor.z - 0.05, hsvOriginColor.z + 0.05);
    }

    //origin
    if (intervalChoice > 0.5){
        hueInterval = vec2(hsvOriginColor.x - 0.04, hsvOriginColor.x + 0.04);
        saturationInterval = vec2(hsvOriginColor.y - 0.05, hsvOriginColor.y + 0.05);
        valueInterval = vec2(hsvOriginColor.z - 0.05, hsvOriginColor.z + 0.05);
    }

    return colorInRange(uv, hueInterval, saturationInterval, valueInterval, seed);
}

vec3 randomSplitComplementary(vec2 uv, vec3 hsvOriginColor, float seed){

    vec2 hueInterval = vec2(0.0, 1.0);
    vec2 saturationInterval = vec2(0.0, 1.0);
    vec2 valueInterval = vec2(0.0, 1.0);

    //complementary down
    float intervalChoice = rand(uv, seed+0.1);
    if (intervalChoice <= 0.3){
        hueInterval = vec2(hsvOriginColor.x - 0.02 + 0.40, hsvOriginColor.x + 0.02 + 0.40);
        saturationInterval = vec2(hsvOriginColor.y - 0.05, hsvOriginColor.y + 0.05);
        valueInterval = vec2(hsvOriginColor.z - 0.05, hsvOriginColor.z + 0.05);
    }

    //origin
    if (intervalChoice > 0.3 && intervalChoice <= 0.7){
        hueInterval = vec2(hsvOriginColor.x - 0.02, hsvOriginColor.x + 0.02);
        saturationInterval = vec2(hsvOriginColor.y - 0.05, hsvOriginColor.y + 0.05);
        valueInterval = vec2(hsvOriginColor.z - 0.05, hsvOriginColor.z + 0.05);
    }

    //complementary up
    if (intervalChoice > 0.7){
        hueInterval = vec2(hsvOriginColor.x - 0.02 + 0.60, hsvOriginColor.x + 0.02 + 0.60);
        saturationInterval = vec2(hsvOriginColor.y - 0.05, hsvOriginColor.y + 0.05);
        valueInterval = vec2(hsvOriginColor.z - 0.05, hsvOriginColor.z + 0.05);
    }

    return colorInRange(uv, hueInterval, saturationInterval, valueInterval, seed);
}

vec3 randomAnalagousComplementary(vec2 uv, vec3 hsvOriginColor, float seed){

    vec2 hueInterval = vec2(0.0, 1.0);
    vec2 saturationInterval = vec2(0.0, 1.0);
    vec2 valueInterval = vec2(0.0, 1.0);

    //complementary down
    float intervalChoice = rand(uv, seed+0.1);
    if (intervalChoice <= 0.4){
        hueInterval = vec2(hsvOriginColor.x - 0.1 + 0.40, hsvOriginColor.x + 0.1 + 0.40);
        saturationInterval = vec2(hsvOriginColor.y - 0.05, hsvOriginColor.y + 0.05);
        valueInterval = vec2(hsvOriginColor.z - 0.05, hsvOriginColor.z + 0.05);
    }

    //origin
    if (intervalChoice > 0.4 && intervalChoice <= 0.6){
        hueInterval = vec2(hsvOriginColor.x - 0.02, hsvOriginColor.x + 0.02);
        saturationInterval = vec2(hsvOriginColor.y - 0.05, hsvOriginColor.y + 0.05);
        valueInterval = vec2(hsvOriginColor.z - 0.05, hsvOriginColor.z + 0.05);
    }

    //complementary up
    if (intervalChoice > 0.6){
        hueInterval = vec2(hsvOriginColor.x - 0.1 + 0.60, hsvOriginColor.x + 0.1 + 0.60);
        saturationInterval = vec2(hsvOriginColor.y - 0.05, hsvOriginColor.y + 0.05);
        valueInterval = vec2(hsvOriginColor.z - 0.05, hsvOriginColor.z + 0.05);
    }

    return colorInRange(uv, hueInterval, saturationInterval, valueInterval, seed);
}

// Draw blob doodle

vec3 drawBlob(vec2 uv ,vec2 center, float standardDeviation, vec3 fillColor, float fillOpacity, vec3 currentColor, vec3 lineColor, int numberOfLines, float seed){

    vec2 points[5] = spawn5Points(center + (-1.0 + 2.0*perlin_noise(uv, 2.0))/16.0, standardDeviation, perlin_noise(vec2(iTime), 0.000001)*seed);

    float density = kde(uv, points, 5, standardDeviation);

    vec3 fillcolor = drawFillCutOff(density - 4.0*perlin_noise(uv+vec2(seed), 20.0), 1.0, 0.1, fillColor, currentColor);

    currentColor = mix(currentColor, fillcolor, fillOpacity);

    for (int i = 0; i < numberOfLines; i++){
        currentColor = drawIsoLine(density - 4.0*perlin_noise(uv+vec2(float(i)+seed), 15.0), 1.0, 0.7, vec3(0.0), currentColor);
    }

    return currentColor;
}

// Border

vec3 border(vec2 id, vec3 color, vec3 borderColor, vec2 xIdRange, vec2 yIdRange){

    if ( id.x < xIdRange.x || id.x > xIdRange.y ){
        color = borderColor;
    }

    if ( id.y < yIdRange.x || id.y > yIdRange.y ){
        color = borderColor;
    }

    return color;
}

// PrintNoise

vec3 printNoise(vec2 uv, vec3 currentColor, float intensity){

    float fbm = perlin_noise(uv, 80.0);
    fbm += 0.51*perlin_noise(uv, 160.1);
    fbm += 0.249*perlin_noise(uv, 200.2);
    fbm = fbm/1.75;


    vec3 color = mix(currentColor, vec3(fbm), intensity);

    return color;
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    // Normalized pixel coordinates
    vec2 uv = toUV(fragCoord);

    // InitializePoints
    const int maxPoints = 5;

    int pointCount = maxPoints;

    // Background Color

    vec3 color = vec3(1.00);

    // Repeated Domain
    float s = 0.37;
    vec2 id = round(uv/s);

    uv = uv - s*id;

    //Blobs
    vec3 blueColor = vec3(0.1 + perlin_noise(vec2(iTime/4.0), 1.0), 0.9, 0.95);
    vec3 greenColor = vec3(0.2 + perlin_noise(vec2(iTime/4.0), 1.0), 0.9, 0.95);

    blueColor = randomAnalogous(id, blueColor, 0.0);
    greenColor = randomAnalogous(id, greenColor, 0.1);

    blueColor = hsv2rgb(blueColor);
    greenColor = hsv2rgb(greenColor);

    color = drawBlob(uv, vec2(0.0), 0.025, greenColor, 0.7, color, vec3(0.0), 3, rand(id+1.0, 1.0));
    color = drawBlob(uv, vec2(0.0)+(-1.0 + 2.0*perlin_noise(uv, 2.0))/16.0, 0.025, blueColor, 0.4, color, vec3(0.0), 3, rand(id, 1.0));
    //color = drawBlob(uv, vec2(0.0), 0.03, vec3(1.0, 0.8, 0.0), 0.4, color, vec3(0.0), 3, rand(id+2.0, 1.0));

    //Undo Repeated Domain
    uv = uv + s*id;

    color = border(id, color, vec3(1.0), vec2(-3.0, 3.0), vec2(-2.0, 2.0));

    color = printNoise(uv, color, 0.05);
    // Output to screen
    fragColor = vec4(color,1.0);
}
